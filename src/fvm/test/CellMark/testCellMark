#!/usr/bin/env python

"""
Run testCellMark.py and check the output files. Returns 0 on success.

Usage: testCellMark [options] casefile mpmfile
Options:
    --golden      Directory containing golden files for comparison.
    --datadir     Directory where test data is stored. Default is current dir.
    --search n    Search Option [1-4]. Passed to testCellMark.py. (default 1)
    --maxerr e    Maximum error for floating point comparisons (default 1.0e-5)
"""

import sys, os, subprocess
from optparse import OptionParser

def usage():
    print __doc__
    sys.exit(-1)

def cleanup(ec):
    sys.exit(ec)

# return 0 if two numbers are equal
def compare_nums(a,b,maxerr):
    if a == b:
        return 0
    try:
        fa = float(a)
        fb = float(b)
        if abs(fa - fb) <= maxerr:
            return 0
    except:
        pass
    return 1

def check_file(file, maxerr, gdir):
    try:
        f = open(file, 'r')
    except:
        print "Cannot open '%s'" % file
        return 1

    try:
        gfile = os.path.join(gdir,file)
        g = open(gfile, 'r')
    except:
        print "Cannot open '%s'" % gfile
        return 1

    err = 0
    while True:
        line = f.readline()
        gline = g.readline()
        if not line:
            if gline:
                print gline
                return 1
            break
        if gline == line:
            continue
        for a,b in zip(line.split(),gline.split()):
            res = compare_nums(a,b,maxerr)
            if res and not err:
                # print a message only on the first fail
                print "Comparison of %s and %s failed" % (file, gfile)
                print line, gline
                err = 1
    return err

def main():
    tcm = 'testCellMark.py'
    if os.path.exists(tcm):
        tcm = os.path.abspath(tcm)
    parser = OptionParser()
    parser.set_defaults(search=1,maxerr=1.0e-5,golden='')
    parser.add_option("--datadir",
                      action="store", dest="datadir", help="Data directory name.")
    parser.add_option("--search", type="int",
                      dest="search",
                      help="Search Option [1-4].")
    parser.add_option("--golden",
                      dest="golden", help="Golden directory.")
    parser.add_option("--maxerr", type="float",
                      dest="maxerr",
                      help="Maximum error for floating point comparisons.")
    (options, args) = parser.parse_args()

    if len(args) != 2 or options.search < 1 or options.search > 4:
        usage()
    casefile = os.path.abspath(args[0])
    mpmfile = os.path.abspath(args[1])
    gdir = os.path.abspath(options.golden)

    if options.datadir:
        if not os.path.isdir(options.datadir):
            try:
                os.makedirs(options.datadir)
            except:
                fatal("error creating directory " + options.datadir)
        os.chdir(options.datadir)

    try:
        cmd = "%s --search %s %s %s" % (tcm, options.search, casefile, mpmfile)
        err = subprocess.call(cmd, shell=True)
        if err < 0:
            print cmd
            print "Child was terminated by signal", -err
            cleanup(-err)
    except OSError, e:
        print cmd
        print "Execution failed:", e
        cleanup(-1)

    # test is done.  Now compare output files
    err = 0
    for f in 'FluidCell.dat', 'IBMCell.dat', 'SolidCell.dat', 'ibfaces.dat':
        err += check_file(f, options.maxerr, gdir)
    cleanup(err)

if __name__ == "__main__":
    main()
